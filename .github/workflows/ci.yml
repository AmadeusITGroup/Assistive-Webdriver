name: ci
on:
  push:
    branches: [master]
    tags: ["**"]
  pull_request:
    branches: [master]
jobs:
  build-text-to-socket-engine:
    runs-on: windows-2019
    strategy:
      matrix:
        arch: [x86, amd64]
    steps:
      - uses: actions/checkout@v2
      - name: Set Node.js version
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - run: node setVersion.js
        working-directory: .\components\text-to-socket-engine
      - run: |
          @echo on
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=${{ matrix.arch }}
          call build.cmd
          move TextToSocketEngine.dll TextToSocketEngine-${{ matrix.arch }}.dll
        shell: cmd
        working-directory: .\components\text-to-socket-engine
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: text-to-socket-engine-${{ matrix.arch }}
          path: components/text-to-socket-engine/TextToSocketEngine-${{ matrix.arch }}.dll
  build-js:
    runs-on: macos-latest
    needs:
      - build-text-to-socket-engine
    strategy:
      matrix:
        ENABLE_COVERAGE: ["0", "1"]
    env:
      ENABLE_COVERAGE: "${{ matrix.ENABLE_COVERAGE }}"
    steps:
      - name: "GitHub variables"
        run: echo "github.event_name = ${{ github.event_name }}, github.ref = ${{ github.ref }}"
      - uses: actions/checkout@v2
      - name: Set Node.js version
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - uses: actions/download-artifact@v2
        with:
          name: text-to-socket-engine-x86
          path: components/text-to-socket-engine
      - uses: actions/download-artifact@v2
        with:
          name: text-to-socket-engine-amd64
          path: components/text-to-socket-engine
      - uses: actions/cache@v2
        with:
          path: "~/.pnpm-store"
          key: pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-
      - run: |
          npm i -g pnpm
          pnpm config set store-dir ~/.pnpm-store
      - run: pnpm install --frozen-lockfile
      - run: pnpm lint
      - run: pnpm format:check
      - run: pnpm apidoc
      - run: pnpm test -r
      - run: ./download.sh
        continue-on-error: true
        name: "Download software (1)"
        working-directory: ./vagrant/win10-chromium-nvda
      - run: ./download.sh
        continue-on-error: true
        name: "Download software (2)"
        working-directory: ./vagrant/win10-chromium-nvda
      - run: ./download.sh
        name: "Download software (3)"
        working-directory: ./vagrant/win10-chromium-nvda
      - name: "Create VM (1)"
        run: ./createVM.sh
        working-directory: ./vagrant/win10-chromium-nvda
        timeout-minutes: 45
        continue-on-error: true
        id: createVM1
      - name: "Create VM (2)"
        if: steps.createVM1.outcome == 'failure'
        run: |
          killall vagrant ruby || true
          vagrant destroy -f
          ./createVM.sh
        working-directory: ./vagrant/win10-chromium-nvda
        timeout-minutes: 45
        continue-on-error: true
        id: createVM2
      - name: "Create VM (3)"
        if: steps.createVM2.outcome == 'failure'
        run: |
          killall vagrant ruby || true
          vagrant destroy -f
          ./createVM.sh
        working-directory: ./vagrant/win10-chromium-nvda
        timeout-minutes: 45
      - run: vboxwebsrv -v -A null --logfile vboxwebsrv.log &
      - name: "test assistive-playwright (1)"
        id: testapw1
        continue-on-error: true
        run: |
          export VM_SETTINGS="$(node -e 'console.log(JSON.stringify(require("./vagrant/win10-chromium-nvda/vm-config.json").nvda.vmSettings))')"
          pnpm nyc-apw-tester -- -l debug -k Insert --vm-settings '$VM_SETTINGS'
      - name: "test assistive-playwright (2)"
        id: testapw2
        if: steps.testapw1.outcome == 'failure'
        continue-on-error: true
        run: |
          export VM_SETTINGS="$(node -e 'console.log(JSON.stringify(require("./vagrant/win10-chromium-nvda/vm-config.json").nvda.vmSettings))')"
          pnpm nyc-apw-tester -- -l debug -k Insert --vm-settings '$VM_SETTINGS'
      - name: "test assistive-playwright (3)"
        if: steps.testapw2.outcome == 'failure'
        run: |
          export VM_SETTINGS="$(node -e 'console.log(JSON.stringify(require("./vagrant/win10-chromium-nvda/vm-config.json").nvda.vmSettings))')"
          pnpm nyc-apw-tester -- -l debug -k Insert --vm-settings '$VM_SETTINGS'
      - run: |
          pnpm nyc-awd-server -- -l debug -c ./vagrant/win10-chromium-nvda/vm-config.json --pid-file assistive-webdriver.pid &> assistive-webdriver.log &
          while ! nc -z 127.0.0.1 3000; do sleep 1; done
        name: "Start assistive-webdriver server"
      - name: "test assistive-webdriver (1)"
        id: testawd1
        run: pnpm nyc-awd-tester -- -m nvda -k Insert -l debug
        continue-on-error: true
      - name: "test assistive-webdriver (2)"
        id: testawd2
        if: steps.testawd1.outcome == 'failure'
        run: pnpm nyc-awd-tester -- -m nvda -k Insert -l debug
        continue-on-error: true
      - name: "test assistive-webdriver (3)"
        if: steps.testawd2.outcome == 'failure'
        run: pnpm nyc-awd-tester -- -m nvda -k Insert -l debug
      - run: |
          ASSISTIVE_WEBDRIVER_PID=$(cat ./assistive-webdriver.pid)
          echo "Sending SIGINT to $ASSISTIVE_WEBDRIVER_PID"
          kill -SIGINT "$ASSISTIVE_WEBDRIVER_PID"
          echo "Waiting for the process to terminate..."
          while kill -0 "$ASSISTIVE_WEBDRIVER_PID"; do sleep 1; done
          echo "Done!"
        name: "Stop assistive-webdriver server"
      - run: cat assistive-webdriver.log
        if: ${{ always() }}
      - run: cat vboxwebsrv.log
        if: ${{ always() }}
      - run: pnpm nyc-report
        if: matrix.ENABLE_COVERAGE == '1' && always()
      - uses: codecov/codecov-action@v1
        with:
          file: ./coverage/lcov.info
        if: matrix.ENABLE_COVERAGE == '1' && always()
      - if: matrix.ENABLE_COVERAGE == '0' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/release/')
        name: pnpm publish
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          pnpm publish -r --no-git-checks
      - if: matrix.ENABLE_COVERAGE == '0' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/release/')
        uses: actions/checkout@v2
        with:
          ref: gh-pages
          path: gh-pages
      - if: matrix.ENABLE_COVERAGE == '0' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/release/')
        run: |
          rm -rf *
          cp -a ../doc/apidoc-output/* .
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit --allow-empty -a -m "Updating from ${{ github.sha }}"
          git push origin gh-pages
        working-directory: ./gh-pages
      - name: "Upload VM"
        if: matrix.ENABLE_COVERAGE == '0' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/release/')
        run: |
          ./packageVM.sh
          export BOX_NAME="assistive-webdriver/win10-chromium-nvda"
          export BOX_VERSION="$(basename ${{ github.ref }})"
          vagrant cloud auth login --token "${{ secrets.VAGRANT_TOKEN }}"
          vagrant cloud version create "$BOX_NAME" "$BOX_VERSION" --description "Contains NVDA and Chromium on Windows 10 for automatic tests of web applications with assistive-webdriver. Automatically created from https://github.com/AmadeusITGroup/Assistive-Webdriver/tree/${{ github.sha }}/vagrant/win10-chromium-nvda"
          vagrant cloud provider create "$BOX_NAME" virtualbox "$BOX_VERSION"
          vagrant cloud provider upload "$BOX_NAME" virtualbox "$BOX_VERSION" package.box --no-direct --debug
          vagrant cloud version release "$BOX_NAME" "$BOX_VERSION" --force
        working-directory: ./vagrant/win10-chromium-nvda
