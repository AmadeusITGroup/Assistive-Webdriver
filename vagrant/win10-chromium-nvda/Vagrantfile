load './Vagrantbasefile'

Vagrant.configure("2") do |config|
  config.vm.box = "MSEdge-Win10"
  config.vm.box_url = "file://./software/MSEdge%20-%20Win10.box"

  config.vm.provider "virtualbox" do |v|
    v.linked_clone = true
    v.name = "win10-chromium-nvda"
    v.customize ["modifyvm", :id, "--vram", "64"]
    v.customize ["setextradata", :id, "GUI/MaxGuestResolution", "any"]
    v.customize ["modifyvm", :id, "--audio", "null", "--audioout", "on", "--audiocontroller", "hda"]
  end

  config.vm.provision "setup",
    type: "shell",
    reboot: true,
    inline: <<-SHELL
      \$ErrorActionPreference = "Stop"
      netsh advfirewall firewall add rule name="Allow WinRM" localport=5985 protocol=tcp dir=in action=allow

      echo "Configuring auto-login..."
      Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon' -Name DefaultUserName -Type String -Value IEUser
      Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon' -Name DefaultPassword -Type String -Value 'Passw0rd!'
      Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon' -Name AutoAdminLogon -Type String -Value 1
      Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System' -Name EnableLUA -Type DWord -Value 0

      echo "Disabling Cortana..."
      New-Item -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows' -Name 'Windows Search' -Force | Out-Null
      Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\Windows Search' -Name AllowCortana -Type DWord -Value 0

      echo "Disabling Windows Update..."
      New-Item -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate' -Name AU -Force | Out-Null
      Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU' -Name NoAutoUpdate -Type DWord -Value 1
      Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU' -Name AUOptions -Type DWord -Value 1
      Set-Service -Name wuauserv -StartupType Disabled

      echo "Marking all connections as metered (to avoid downloading updates)..."
      \$definition = @"
using System;
using System.Runtime.InteropServices;
namespace Win32Api
{
    public class NtDll
    {
        [DllImport("ntdll.dll", EntryPoint="RtlAdjustPrivilege")]
        public static extern int RtlAdjustPrivilege(ulong Privilege, bool Enable, bool CurrentThread, ref bool Enabled);
    }
}
"@
      Add-Type -TypeDefinition \$definition -PassThru | Out-Null
      [Win32Api.NtDll]::RtlAdjustPrivilege(9, \$true, \$false, [ref]\$false)
      \$key = [Microsoft.Win32.Registry]::LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\NetworkList\\DefaultMediaCost",[Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree,[System.Security.AccessControl.RegistryRights]::takeownership)
      \$acl = \$key.GetAccessControl()
      \$acl.SetOwner([System.Security.Principal.NTAccount]"Administrators")
      \$key.SetAccessControl(\$acl)
      \$rule = New-Object System.Security.AccessControl.RegistryAccessRule ([System.Security.Principal.NTAccount]"Administrators","FullControl","Allow")
      \$acl.SetAccessRule(\$rule)
      \$key.SetAccessControl(\$acl)
      Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\NetworkList\\DefaultMediaCost' -Name Default -Type DWord -Value 2
      Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\NetworkList\\DefaultMediaCost' -Name Ethernet -Type DWord -Value 2
      Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\NetworkList\\DefaultMediaCost' -Name Wifi -Type DWord -Value 2
      Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\NetworkList\\DefaultMediaCost' -Name 3G -Type DWord -Value 2
      Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\NetworkList\\DefaultMediaCost' -Name 4G -Type DWord -Value 2

      echo "Disabling notifications..."
      New-Item -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows' -Name Explorer -Force | Out-Null
      Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\Explorer' -Name DisableNotificationCenter -Type DWord -Value 1
      Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer' -Name NoTrayItemsDisplay -Type DWord -Value 1

      echo "Disabling ipv6..."
      Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Services\\Tcpip6\\Parameters' -Name DisabledComponents -Type DWord -Value 0xFF

      echo "Allowing the mouse to move just after typing..."
      Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\PrecisionTouchPad' -Name AAPThreshold -Type DWord -Value 0

      echo "Disabling Windows Defender (uses too much memory and cpu)..."
      Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender' -Name DisableAntiSpyware -Type DWord -Value 1
      Set-MpPreference -DisableRealtimeMonitoring \$true

      echo "Configuring best performance setting..."
      \$p = Start-Process reg.exe -ArgumentList "import","c:\\vagrant\\bestPerf.reg" -Wait -NoNewWindow -PassThru
      if ( \$p.ExitCode -ne 0 ) { exit \$p.ExitCode }

      echo "Installing VC_redist..."
      Copy-Item "C:\\vagrant\\software\\VC_redist.x64.exe" -Destination "C:\\"
      \$p = Start-Process -FilePath C:\\VC_redist.x64.exe -ArgumentList "/install","/quiet","/norestart" -Wait -NoNewWindow -PassThru
      if ( \$p.ExitCode -ne 0 ) { exit \$p.ExitCode }

      echo "Installing nvda..."
      \$p = Start-Process -FilePath C:\\vagrant\\software\\nvda.exe -ArgumentList "--install-silent","--minimal","--log-level=20","--log-file=C:\\NVDA.log","--enable-start-on-logon=False" -Wait -NoNewWindow -PassThru
      if ( \$p.ExitCode -ne 0 ) { exit \$p.ExitCode }
      New-Item -Path 'C:\\Users\\IEUser\\AppData\\Roaming\\nvda' -ItemType "directory" -Force | Out-Null
      Copy-Item "C:\\vagrant\\nvda.ini" -Destination "C:\\Users\\IEUser\\AppData\\Roaming\\nvda\\"

      echo "Installing java..."
      Expand-Archive -Path C:\\vagrant\\software\\openjdk.zip -DestinationPath C:\\

      echo "Installing chromium..."
      Expand-Archive -Path C:\\vagrant\\software\\chrome.zip -DestinationPath C:\\
      Expand-Archive -Path C:\\vagrant\\software\\chromedriver.zip -DestinationPath C:\\

      echo "Installing selenium-server..."
      Copy-Item "C:\\vagrant\\software\\selenium-server.jar" -Destination C:\\
      netsh advfirewall firewall add rule name="Allow selenium" localport=4444 protocol=tcp dir=in action=allow

      echo "Installing node.js..."
      Expand-Archive -Path C:\\vagrant\\software\\node.zip -DestinationPath C:\\
      netsh advfirewall firewall add rule name="Allow nodejs" dir=in action=allow program="c:\\node-v14.17.6-win-x64\\node.exe" enable=yes

      echo "Installing assistive-playwright-server and text-to-socket-engine..."
      \$p = Start-Process -FilePath c:\\node-v14.17.6-win-x64\\npm.cmd -ArgumentList "install","--scripts-prepend-node-path=true","-g","c:\\vagrant\\win10-chromium-nvda-vm-0.0.0.tgz" -Wait -NoNewWindow -PassThru
      if ( \$p.ExitCode -ne 0 ) { exit \$p.ExitCode }
      \$p = Start-Process -FilePath c:\\node-v14.17.6-win-x64\\node_modules\\win10-chromium-nvda-vm\\node_modules\\.bin\\text-to-socket-engine-register.cmd -Wait -NoNewWindow -PassThru
      if ( \$p.ExitCode -ne 0 ) { exit \$p.ExitCode }

      echo "Configuring startup and environment..."
      Copy-Item "C:\\vagrant\\start.cmd" -Destination C:\\
      Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run' -Name StartCmd -Type String -Value 'c:\\start.cmd'
      \$curPath = Get-ItemPropertyValue -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name PATH
      Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name PATH -Type ExpandString -Value "\$curPath;c:\\node-v14.17.6-win-x64;c:\\chromedriver_win32;c:\\chrome-win"

      echo "Setup finished successfully!"
  SHELL

end
